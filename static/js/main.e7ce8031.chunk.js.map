{"version":3,"sources":["components/Header.js","components/Filter.js","components/Table/TableHeaders.js","components/Table/TableData.js","components/Table/Table.js","components/AppContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Filter","props","roleArray","Data","forEach","entry","push","role","uniqueRoles","Array","from","Set","htmlFor","name","list","type","onChange","handleInputChange","value","filter","placeholder","id","map","key","onClick","handleFormSubmit","handleTableReset","TableHeaders","scope","handleIdSort","width","height","viewBox","fill","xmlns","fillRule","d","handleNameSort","TableData","data","employee","firstName","lastName","email","Table","AppContainer","state","results","noResults","madeSearch","event","search","target","setState","preventDefault","filteredResults","length","a","sortedResults","sort","b","localeCompare","renderTable","renderTableContentsMessage","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7ce8031.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nexport default function Header() {\n    return <h1 className=\"pt-5 pb-5 header\">Employee Directory</h1>\n}","import React from 'react';\nimport Data from './Employees.json';\nimport './style.css'\n\nexport default function Filter(props) {\n    // lets give options in a datalist of possible filters on the input...\n    // push all of the roles into an array\n    const roleArray = []\n    Data.forEach(entry => {\n        roleArray.push(entry.role)\n    })\n    // This makes an array of only unique roles- no repeats\n    // credit for this small code snippet: https://stackoverflow.com/questions/1960473/get-all-unique-values-in-a-javascript-array-remove-duplicates\n    const uniqueRoles = Array.from(new Set(roleArray))\n\n    return (\n      <form className=\"search container mb-4 col-8\">\n        <div className=\"form-inline \">\n          <label className='mr-2' htmlFor=\"filter\">Filter by role</label>\n          <input \n          name='filter' \n          list='roles' \n          type='text' \n          onChange={props.handleInputChange} \n          value={props.filter} \n          className='form-control col-6' \n          placeholder='Enter a role to filter by' \n          id='filter'/>\n          <datalist id='roles'>\n              {uniqueRoles.map(role => (\n                  <option value={role} key={role} />\n              ))}\n            </datalist>\n          <button type=\"submit\" className='filter-btn m-2' onClick={props.handleFormSubmit} >Filter</button>\n          <button className='filter-btn' onClick={props.handleTableReset} >Reset</button>\n        </div>\n      </form>\n    );\n  \n}\n","import React from 'react';\nimport './style.css'\n\nexport default function TableHeaders(props) {\n  return (\n    <thead className=\"tablehead\">\n      <tr>\n        <th scope=\"col\">#  \n            <button className='btn btn-outline-dark btn-sm ml-2' onClick={props.handleIdSort} >\n                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-sort-numeric-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fillRule=\"evenodd\" d=\"M4 2a.5.5 0 0 1 .5.5v11a.5.5 0 0 1-1 0v-11A.5.5 0 0 1 4 2z\"/>\n                    <path fillRule=\"evenodd\" d=\"M6.354 11.146a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L4 12.793l1.646-1.647a.5.5 0 0 1 .708 0z\"/>\n                    <path d=\"M12.438 7V1.668H11.39l-1.262.906v.969l1.21-.86h.052V7h1.046zm-2.84 5.82c.054.621.625 1.278 1.761 1.278 1.422 0 2.145-.98 2.145-2.848 0-2.05-.973-2.688-2.063-2.688-1.125 0-1.972.688-1.972 1.836 0 1.145.808 1.758 1.719 1.758.69 0 1.113-.351 1.261-.742h.059c.031 1.027-.309 1.856-1.133 1.856-.43 0-.715-.227-.773-.45H9.598zm2.757-2.43c0 .637-.43.973-.933.973-.516 0-.934-.34-.934-.98 0-.625.407-1 .926-1 .543 0 .941.375.941 1.008z\"/>\n                </svg>\n            </button>\n        </th>\n        <th scope=\"col\">First Name</th>\n        <th scope=\"col\">Last Name \n            <button className='btn btn-outline-dark btn-sm ml-2' onClick={props.handleNameSort} > \n                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-sort-alpha-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fillRule=\"evenodd\" d=\"M4 2a.5.5 0 0 1 .5.5v11a.5.5 0 0 1-1 0v-11A.5.5 0 0 1 4 2z\"/>\n                    <path fillRule=\"evenodd\" d=\"M6.354 11.146a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L4 12.793l1.646-1.647a.5.5 0 0 1 .708 0z\"/>\n                    <path d=\"M9.664 7l.418-1.371h1.781L12.281 7h1.121l-1.78-5.332h-1.235L8.597 7h1.067zM11 2.687l.652 2.157h-1.351l.652-2.157H11zM9.027 14h3.934v-.867h-2.645v-.055l2.567-3.719v-.691H9.098v.867h2.507v.055l-2.578 3.719V14z\"/>\n                </svg>\n            </button>\n        </th>\n        <th scope=\"col\">Role</th>\n        <th scope=\"col\">Email</th>\n      </tr>\n    </thead>\n  );\n}\n","import React from 'react';\nimport './style.css'\n\nexport default function TableData(props) {\n  return (\n    //   map through all results and create a row in the table for each employee in the results\n    <tbody className=\"tabledata\">\n      {props.data.map((employee) => (\n        <tr key={employee.id} >\n          <td>{employee.id}</td>\n          <td>{employee.firstName}</td>\n          <td>{employee.lastName}</td>\n          <td>{employee.role}</td>\n          <td>{employee.email}</td>\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n","import React from 'react';\nimport TableHeaders from './TableHeaders';\nimport TableData from './TableData';\nimport './style.css';\n\nexport default function Table(props) {\n    return (\n      <div className=\"table-div pb-5\">\n        <table className=\"table\">\n          <TableHeaders handleNameSort={props.handleNameSort} handleIdSort={props.handleIdSort} />\n          <TableData data={props.data} />\n        </table>\n      </div>\n    );\n\n}\n","import React from 'react';\nimport Data from './Employees.json';\nimport Filter from './Filter';\nimport Table from './Table/Table';\nimport './style.css'\n\nexport default class AppContainer extends React.Component {\n  state = {\n    filter: '',\n    results: Data,\n    noResults: false,\n    madeSearch: false,\n  };\n\n//   set the filter in the state to what is entered in the input\n  handleInputChange = (event) => {\n    const search = event.target.name;\n    const value = event.target.value;\n    this.setState({ [search]: value });\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const filteredResults = Data.filter(employee => employee.role === this.state.filter);\n    // if there are results that match the filter, set the state.results to the new results\n    // if no results, noResults is set to true, which is used for conditional rendering\n    if (filteredResults.length !== 0) {\n        this.setState({results: filteredResults, noResults: false, madeSearch: true});\n    } else {\n        this.setState({noResults: true});\n    }\n    // clear the input\n    this.setState({filter: ''});\n  }\n\n//   this resets the table by setting the state.results back to the original data from the Employee.json.  It also resets the order of the data, if the data has been sorted\n  handleTableReset = async (event) => {\n      event.preventDefault();\n      await this.setState({results: Data, noResults: false, madeSearch: false});\n      this.handleIdSort();\n  }\n\n  handleNameSort = (event) => {\n    event.preventDefault();\n    // credit for sorting goes to: https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value\n    let sortedResults = this.state.results.sort((a, b) => a.lastName.localeCompare(b.lastName));\n    this.setState({results: sortedResults, noResults: false });\n  }\n\n  handleIdSort = () => {\n    const sortedResults = this.state.results.sort((a, b) => {return a.id - b.id});\n    this.setState({results: sortedResults, noResults: false});\n  }\n\n//   Conditional rendering if there are no results that match the filtered search\n  renderTable = () => {\n      if (this.state.noResults === false) {\n          return <Table handleNameSort={this.handleNameSort} handleIdSort={this.handleIdSort} data={this.state.results} />;\n      } else if (this.state.noResults === true) {\n          return <p>Oops, looks like there were no results...Try a different search.</p>;\n      }\n  }\n\n  renderTableContentsMessage = () => {\n      if (this.state.madeSearch === true) {\n          return <h3 className=\"table-content-message\" >All {this.state.results[0].role}s</h3>;\n      } else {\n          return <h3 className=\"table-content-message\" >All Employees</h3>;\n      }\n  }\n\n  render() {\n    return (\n      <div className='container' >\n        <Filter \n        handleFormSubmit={this.handleFormSubmit} \n        handleInputChange={this.handleInputChange} \n        filter={this.state.filter} \n        data={this.state.results} \n        handleTableReset={this.handleTableReset} />\n        {this.renderTableContentsMessage()}\n        {this.renderTable()}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Header from './components/Header';\nimport AppContainer from './components/AppContainer';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <AppContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App className=\"App\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}